package org.ntnu.idi.idatt2105.fant.org.fantorg.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Embedded;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.ntnu.idi.idatt2105.fant.org.fantorg.model.enums.Condition;
import org.ntnu.idi.idatt2105.fant.org.fantorg.model.enums.ListingType;
import org.ntnu.idi.idatt2105.fant.org.fantorg.model.enums.Status;

/**
 * Entity representing an item listed for sale.
 *
 * <p>This entity maps to the "items" table in the database and holds all details about an item:
 *
 * <ul>
 *   <li><b>title</b>: The title or name of the item.
 *   <li><b>description</b>: A detailed description of the item.
 *   <li><b>price</b>: The price of the item listed for sale.
 *   <li><b>subCategory</b>: The category that the item belongs to.
 *   <li><b>publishedAt</b>: The date and time when the item was published.
 *   <li><b>seller</b>: The seller of the item, represented by a {@link User} entity.
 *   <li><b>tags</b>: A list of tags or keywords associated with the item for easier search.
 *   <li><b>location</b>: The location of the item, represented by a {@link Location} embedded
 *       entity.
 *   <li><b>listingType</b>: The type of the listing, represented by an enum of {@link ListingType}.
 *   <li><b>status</b>: The status of the item (e.g., active, sold), represented by an enum of
 *       {@link Status}.
 *   <li><b>condition</b>: The condition of the item (e.g., new, used), represented by an enum of
 *       {@link Condition}.
 *   <li><b>forSale</b>: A boolean indicating whether the item is for sale.
 *   <li><b>images</b>: A list of images associated with the item, each represented by an {@link
 *       Image} entity.
 *   <li><b>bids</b>: A list of bids placed on the item, represented by the {@link Bid} entity.
 *   <li><b>bookmarks</b>: A list of bookmarks for the item, represented by the {@link Bookmark}
 *       entity.
 *   <li><b>chatMessages</b>: A list of chat messages related to the item, represented by the {@link
 *       ChatMessage} entity.
 *   <li><b>chatRooms</b>: A list of chat rooms associated with the item, represented by the {@link
 *       ChatRoom} entity.
 * </ul>
 */
@NoArgsConstructor
@Entity
@Getter
@Setter
@AllArgsConstructor
@Table(name = "items")
public class Item {

  /** The unique identifier of the item. It is auto-generated by the database. */
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Setter(AccessLevel.NONE)
  @Column(name = "item_id")
  private Long itemId;

  /** The title or name of the item. */
  private String title;

  /** A detailed description of the item. */
  private String description;

  /** The price of the item listed for sale. */
  private BigDecimal price;

  /**
   * The category that the item belongs to. This is a many-to-one relationship with the {@link
   * Category} entity.
   */
  @ManyToOne
  @JoinColumn(name = "subcategory_id")
  private Category subCategory;

  /** The date and time when the item was published. */
  private LocalDateTime publishedAt;

  /**
   * The seller of the item. This is a many-to-one relationship with the {@link User} entity. This
   * field is ignored during JSON serialization to avoid circular references.
   */
  @ManyToOne
  @JoinColumn(name = "seller_id")
  @JsonIgnore
  private User seller;

  /**
   * A list of tags or keywords associated with the item. This is an element collection and is not
   * an entity.
   */
  @ElementCollection private List<String> tags;

  /**
   * The location of the item. This is an embedded entity represented by the {@link Location} class.
   */
  @Embedded private Location location;

  /** The type of the listing. This is an enum field of type {@link ListingType}. */
  @Enumerated(EnumType.STRING)
  private ListingType listingType;

  /** The status of the item. This is an enum field of type {@link Status}. */
  @Enumerated(EnumType.STRING)
  @Column(name = "item_status")
  private Status status;

  /** The condition of the item. This is an enum field of type {@link Condition}. */
  @Enumerated(EnumType.STRING)
  @Column(name = "item_condition")
  private Condition condition;

  /** A boolean indicating whether the item is for sale. */
  private boolean forSale;

  /**
   * A list of images associated with the item. This is a one-to-many relationship with the {@link
   * Image} entity.
   */
  @OneToMany(mappedBy = "item", cascade = CascadeType.ALL, orphanRemoval = true)
  private List<Image> images = new ArrayList<>();

  /**
   * A list of bids placed on the item. This is a one-to-many relationship with the {@link Bid}
   * entity.
   */
  @OneToMany(mappedBy = "item", cascade = CascadeType.ALL, orphanRemoval = true)
  private List<Bid> bids = new ArrayList<>();

  /**
   * A list of bookmarks for the item. This is a one-to-many relationship with the {@link Bookmark}
   * entity.
   */
  @OneToMany(mappedBy = "item", cascade = CascadeType.ALL, orphanRemoval = true)
  private List<Bookmark> bookmarks = new ArrayList<>();

  /**
   * A list of chat messages related to the item. This is a one-to-many relationship with the {@link
   * ChatMessage} entity.
   */
  @OneToMany(mappedBy = "item", cascade = CascadeType.ALL, orphanRemoval = true)
  private List<ChatMessage> chatMessages = new ArrayList<>();

  /**
   * A list of chat rooms associated with the item. This is a one-to-many relationship with the
   * {@link ChatRoom} entity.
   */
  @OneToMany(mappedBy = "item", cascade = CascadeType.ALL, orphanRemoval = true)
  private List<ChatRoom> chatRooms = new ArrayList<>();
}
