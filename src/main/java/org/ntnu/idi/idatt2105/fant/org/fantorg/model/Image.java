package org.ntnu.idi.idatt2105.fant.org.fantorg.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Entity representing an image associated with an item.
 * <p>
 * This entity maps to the "images" table in the database and holds details about the image:
 * <ul>
 *   <li><b>url</b>: The URL of the image.</li>
 *   <li><b>publicId</b>: The public identifier of the image, used for identification in external storage (e.g., cloud storage).</li>
 *   <li><b>caption</b>: The caption or description of the image.</li>
 *   <li><b>item</b>: The item that this image belongs to, establishing a many-to-one relationship with the {@link Item} entity.</li>
 * </ul>
 * </p>
 */
@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "images")
public class Image {

  /**
   * The unique identifier of the image.
   * It is auto-generated by the database.
   */
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  /**
   * The URL where the image is hosted.
   * This field allows for up to 1000 characters to accommodate long URLs.
   */
  @Column(length = 1000) // Increased from 255
  private String url;

  /**
   * The public identifier of the image, used for external identification (e.g., cloud storage).
   */
  private String publicId;

  /**
   * A caption or description for the image.
   */
  private String caption;

  /**
   * The item to which this image is associated.
   * This is a many-to-one relationship with the {@link Item} entity.
   * This field is ignored during JSON serialization to avoid circular references.
   */
  @ManyToOne
  @JoinColumn(name = "item_id")
  @JsonIgnore
  private Item item;
}
